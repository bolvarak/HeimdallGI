///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Headers //////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "Controller.h"

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Globals //////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

HeimdallGI::Controller* HeimdallGI::Controller::mInstance = NULL;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Constants ////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

QString HeimdallGI::Controller::ContentTypeCSS        = "text/css";
QString HeimdallGI::Controller::ContentTypeFont       = "application/font";
QString HeimdallGI::Controller::ContentTypeFontEOT    = "font/vnd.ms-fontobject";
QString HeimdallGI::Controller::ContentTypeFontOTF    = "font/opentype";
QString HeimdallGI::Controller::ContentTypeFontTTF    = "font/ttf";
QString HeimdallGI::Controller::ContentTypeFontWOFF   = "font/woff";
QString HeimdallGI::Controller::ContentTypeHTML       = "text/html";
QString HeimdallGI::Controller::ContentTypeImageGIF   = "image/gif";
QString HeimdallGI::Controller::ContentTypeImageJPEG  = "image/jpg";
QString HeimdallGI::Controller::ContentTypeImageJPG   = "image/jpg";
QString HeimdallGI::Controller::ContentTypeImagePNG   = "image/png";
QString HeimdallGI::Controller::ContentTypeImageSVG   = "image/svg+xml";
QString HeimdallGI::Controller::ContentTypeImageTIF   = "image/tiff";
QString HeimdallGI::Controller::ContentTypeJSON       = "application/json";
QString HeimdallGI::Controller::ContentTypeScriptECMA = "text/ecmascript";
QString HeimdallGI::Controller::ContentTypeScriptJS   = "text/javascript";
QString HeimdallGI::Controller::ContentTypeScriptVB   = "text/vbscript";
QString HeimdallGI::Controller::ContentTypeText       = "text/plain";
QString HeimdallGI::Controller::ContentTypeXML        = "text/xml";

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Singleton ////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

HeimdallGI::Controller* HeimdallGI::Controller::Instance(bool bReset)
{
	// Check for an existing instance or a reset notification
	if ((mInstance == NULL) || (bReset == true)) {
		// Set the instance
		mInstance = new HeimdallGI::Controller();
	}
	// Return the instance
	return mInstance;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Constructor //////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

HeimdallGI::Controller::Controller(QObject* qoParent) : QObject(qoParent) {}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Protected Methods ////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool HeimdallGI::Controller::IsCurrentUrl(QString strUrl)
{
	// Check to see if the URL contains the URL argument
	if (this->mRequestObject->getRequestUri().contains(strUrl)) {
		// This is the current URL
		return true;
	}
	// Check to see if the URL is the URL argument
	if (this->mRequestObject->getRequestUri() == strUrl) {
		// This is the current URL
		return true;
	}
	// No matches were found
	return false;
}

void HeimdallGI::Controller::SendHttpQueryEndpointResponse(QVariantMap qvmResponse)
{
	// Setup the URL class
	QUrlQuery qurResponse;
	// Loop through the map
	for(QVariantMap::const_iterator itrResponse = qvmResponse.begin(); itrResponse != qvmResponse.end(); ++itrResponse) {
		// Add the response item to the query
		qurResponse.addQueryItem(itrResponse.key(), itrResponse.value());
	}

}
