///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Headers //////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "ErrorController.h"

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Namespace ////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace HeimdallGI {

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Globals /////////////////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	ErrorController* ErrorController::mInstance = NULL;

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Singleton ///////////////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	ErrorController* ErrorController::Instance(bool bReset) {
		// Check for an existing instance or a reset flag
		if ((mInstance == NULL) || (bReset = true)) {
			// Instantiate the class
			mInstance = new ErrorController;
		}
		// Return the instance
		return mInstance;
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Constructor /////////////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	ErrorController::ErrorController(QObject* qoParent) : QObject(qoParent) {}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Handlers ////////////////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void ErrorController::NotFound(CGI* &objRequest, View* &objResponse) {
		// Set the page title
		objResponse->setPageValue("pageTitle", "404 Not Found");
		// Set the page name
		objResponse->setPageValue("pageName", "404 Not Found");
		// Set the REQUEST_URI
		objResponse->setPageValue("requestURI", objRequest->getRequestHeader("REQUEST_URI"));
		// Set debug output
		objResponse->setPageValue("showStackTrace", Configuration::Get("Environment.showDebug").toString());
		// Set the stack trace
		objResponse->setPageValue("stackTrace", "${STACK_TRACE}");
		// Define the template
		QString strTemplate = Configuration::Get("Templates.notFound").toString();
		// Set the view file
		objResponse->setTemplate(strTemplate.isEmpty() ? ":/templates/notFound.hgt" : strTemplate);
	}

	void ErrorController::ServerFault(CGI* &objRequest, View* &objResponse, QString strMessage) {
		// Set the page title
		objResponse->setPageValue("pageTitle", "500 Internal Server Error");
		// Set the page name
		objResponse->setPageValue("pageName", "500 Internal Server Error");
		// Set the error message
		objResponse->setPageValue("errorMessage", strMessage);
		// Set debug output
		objResponse->setPageValue("showStackTrace", Configuration::Get("Environment.showDebug").toString());
		// Set the stack trace
		objResponse->setPageValue("stackTrace", "${STACK_TRACE}");
		// Define the themplate
		QString strTemplate = Configuration::Get("Templates.serverFault").toString();
		// Set the view file
		objResponse->setTemplate(strTemplate.isEmpty() ? ":/templates/serverFault.hgt" : strTemplate);
	}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// End Namespace ////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}
