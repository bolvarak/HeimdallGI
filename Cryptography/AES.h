///////////////////////////////////////////////////////////////////////////////
/// Definitions //////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////

#ifndef HEIMDALLGI_CRYPTOGRAPHY_ENGINE_H
#define HEIMDALLGI_CRYPTOGRAPHY_ENGINE_H

///////////////////////////////////////////////////////////////////////////////
/// Headers //////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////

#include "iostream"
#include "../Configuration.h"
#include "QtCore/QByteArray"
#include "QtCore/QObject"
#include "QtCore/QString"
#include "QtCore/QStringList"
#include "QtCore/QStringListIterator"
#include "QtCore/QVariant"
#include "Qca-qt5/QtCrypto/QtCrypto"

///////////////////////////////////////////////////////////////////////////////
/// HeimdallGI Namespace /////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////

namespace HeimdallGI
{
	///////////////////////////////////////////////////////////////////////////
	/// HeimdallGI::Cryptography Namespace ///////////////////////////////////
	/////////////////////////////////////////////////////////////////////////

	namespace Cryptography
	{
		///////////////////////////////////////////////////////////////////////
		/// HeimdallGI::Cryptography::AES Class Definition ///////////////////
		/////////////////////////////////////////////////////////////////////

		class AES : public QObject
		{
			///////////////////////////////////////////////////////////////////
			/// QObject Classification ///////////////////////////////////////
			/////////////////////////////////////////////////////////////////

			Q_OBJECT;

			///////////////////////////////////////////////////////////////////
			/// Public Methods & Properties //////////////////////////////////
			/////////////////////////////////////////////////////////////////

			public:

				///////////////////////////////////////////////////////////////
				/// Static Methods ///////////////////////////////////////////
				/////////////////////////////////////////////////////////////

				/**
				 * This method decrypts a single pass encrypted hash
				 * @access public
				 * @name HeimdallGI::Cryptography::AES::decrypt()
				 * @param QByteArray strHash
				 * @param bool blnFromBase64 [true]
				 * @return QVariant
				 * @static
				 */
				static QVariant decrypt(QByteArray strHash, bool blnFromBase64 = true);

				/**
				 * This method encrypts data with a single pass
				 * @access public
				 * @name HeimdallGI::Cryptography::AES::encrypt()
				 * @param QVariant mixData
				 * @param bool blnToBase64 [true]
				 * @return QByteArray
				 * @static
				 */
				static QByteArray encrypt(QVariant mixData, bool blnToBase64 = true);

				/**
				 * This method recursively decrypts a recursively encrypted hash
				 * @access public
				 * @name HeimdallGI::Cryptography::AES::recursiveDecrypt()
				 * @param QByteArray strHash
				 * @param int64_t intRecursion [10]
				 * @param bool blnFromBase64 [true]
				 * @return QVariant
				 * @static
				 */
				static QVariant recursiveDecrypt(QByteArray strHash, int64_t intRecursion = 10, bool blnFromBase64 = true);

				/**
				 * This method recursively encrypts data
				 * @access public
				 * @name HeimdallGI::Cryptography::AES::recursiveEncrypt()
				 * @param QVariant mixData
				 * @param int64_t intRecursion [10]
				 * @param bool blnToBase64 [true]
				 * @return QByteArray
				 * @static
				 */
				static QByteArray recursiveEncrypt(QVariant mixData, int64_t intRecursion = 10, bool blnToBase64 = true);
		};

	///////////////////////////////////////////////////////////////////////////
	/// End HeimdallGI::Cryptography Namespace ///////////////////////////////
	/////////////////////////////////////////////////////////////////////////

	}

///////////////////////////////////////////////////////////////////////////////
/// End HeimdallGI Namespace /////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////

}

///////////////////////////////////////////////////////////////////////////////
/// End Definitions //////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////

#endif //HEIMDALLGI_CRYPTOGRAPHY_ENGINE_H
