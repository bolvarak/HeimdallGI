///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Definitions //////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef HEIMDALLGI_ROUTER_H
#define HEIMDALLGI_ROUTER_H

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Headers //////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "QByteArray"
#include "QDebug"
#include "QList"
#include "QMap"
#include "QMetaMethod"
#include "QMetaObject"
#include "QMetaProperty"
#include "QObject"
#include "QRegularExpression"
#include "QRegularExpressionMatch"
#include "QStringList"
#include "QString"
#include "QVariantMap"
#include "QVariant"
#include "CGI.h"
#include "Template.h"
#include "View.h"

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Namespace ////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace HeimdallGI {

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Structures ///////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	struct Route {

		///////////////////////////////////////////////////////////////////////
		/// Properties ///////////////////////////////////////////////////////
		/////////////////////////////////////////////////////////////////////

		/**
		 * @paragraph This property contains the controller object for this route
		 * @brief HeimdallGI::Route::mController
		 * @var QObject*
		 */
		QObject* mController;

		/**
		 * @paragraph This property contains the path expression to test for this route
		 * @brief HeimdallGI::Route::mPath
		 * @var QString
		 */
		QString mPath;

		/**
		 * @paragraph This property contains the view method to execute inside the controller for this route
		 * @brief HeimdallGI::Route::mViewMethod
		 * @var QByteArray
		 */
		QByteArray mViewMethod;

		///////////////////////////////////////////////////////////////////////
		/// Constructor //////////////////////////////////////////////////////
		/////////////////////////////////////////////////////////////////////

		Route() : mController(0) {}

		///////////////////////////////////////////////////////////////////////
		/// Getters //////////////////////////////////////////////////////////
		/////////////////////////////////////////////////////////////////////

		/**
		 * @paragraph This method returns the controller for this route
		 * @brief HeimdallGI::Route::getController()
		 * @return QObject* HeimdallGI::Route::mController
		 */
		QObject* getController() {
			// Return the controller for this route
			return mController;
		}

		/**
		 * @paragraph This method returns the path expression for this route
		 * @brief HeimdallGI::Route::getPath()
		 * @return QString HeimdallGI::Route::mPath
		 */
		QString getPath() {
			// Return the path expression for this route
			return mPath;
		}

		/**
		 * @paragraph This method returns the view method for this route
		 * @brief HeimdallGI::Route::getViewMethod()
		 * @return QByteArray HeimdallGI::Route::mViewMethod
		 */
		QByteArray getViewMethod() {
			// Return the view method for this route
			return mViewMethod;
		}

		///////////////////////////////////////////////////////////////////////
		/// Setters //////////////////////////////////////////////////////////
		/////////////////////////////////////////////////////////////////////

		/**
		 * @paragraph This method sets the controller into this route
		 * @brief HeimdallGI::Route::setController()
		 * @param QObject* objController
		 * @return void
		 */
		void setController(QObject* objController) {
			// Set the controller into the structure
			mController = objController;
		}

		/**
		 * @paragraph This method sets the path expression into this route
		 * @brief HeimdallGI::Route::setPath()
		 * @param QString strPath
		 * @return void
		 */
		void setPath(QString strPath) {
			// Set the path into the structure
			mPath       = strPath;
		}

		/**
		 * @paragraph This method sets the view method into this route
		 * @brief HeimdallGI::Route::setViewMethod()
		 * @param QByteArray qbaMethod
		 * @return void
		 */
		void setViewMethod(QByteArray qbaMethod) {
			// Set the view method into the instance
			mViewMethod = qbaMethod;
		}

	};

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// HeimdallGI::Router Class Definition //////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	class Router : public QObject
	{
		/**
		 * Ensure this class is recognized by Qt
		 */
		Q_OBJECT

	///////////////////////////////////////////////////////////////////////////
	/// Protected Methods & Properties ///////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////

	protected:

		///////////////////////////////////////////////////////////////////////
		/// Properties ///////////////////////////////////////////////////////
		/////////////////////////////////////////////////////////////////////

		/**
		 * @paragraph This property contains the singleton instance of this class
		 * @brief HeimdallGI::Router::mInstance
		 * @var HeimdallGI::Router*
		 */
		static Router* mInstance;

		/**
		 * @paragraph This property contains the current Request
		 * @brief HeimdallGI::Router::mRequest
		 * @var HeimdallGI::CGI*
		 */
		CGI* mRequest;

		/**
		 * @paragraph This property contains all of the routes and views
		 * @brief HeimdallGI::Router::mRoutes
		 * @var QList<HeimdallGI::Route>
		 */
		QList<Route> mRoutes;

		///////////////////////////////////////////////////////////////////////
		/// Methods //////////////////////////////////////////////////////////
		/////////////////////////////////////////////////////////////////////

		/**
		 * @paragraph This method extracts the data from the REQUEST_URI and matches it against the route
		 * @brief HeimdallGI::Router::ReverseMatchPath()
		 * @param QString strPattern
		 * @param QString strPath
		 * @param QVariantMap qvmParameters
		 * @return bool
		 */
		bool ReverseMatchPath(QString strPattern, QString strPath, QVariantMap &qvmParameters);

	///////////////////////////////////////////////////////////////////////////
	/// Public Methods & Properties //////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////

	public:

		///////////////////////////////////////////////////////////////////////
		/// Singleton ////////////////////////////////////////////////////////
		/////////////////////////////////////////////////////////////////////

		/**
		 * @paragraph This method maintains access to the singleton instance of this class
		 * @brief HeimdallGI::Router::Instance()
		 * @param bool bReset [false]
		 * @return HeimdallGI::Router* HeimdallGI::Router::mInstance
		 */
		static Router* Instance(bool bReset = false);

		///////////////////////////////////////////////////////////////////////
		/// Constructor //////////////////////////////////////////////////////
		/////////////////////////////////////////////////////////////////////

		/**
		 * @paragraph This method is our constructor and it sets up our class
		 * @brief HeimdallGI::Router::Router()
		 * @param QObject* qoParent [0]
		 * @param HeimdallGI::CGI* objRequest [NULL]
		 */
		explicit Router(QObject* qoParent = 0, CGI* objRequest = NULL);

		///////////////////////////////////////////////////////////////////////
		/// Methods //////////////////////////////////////////////////////////
		/////////////////////////////////////////////////////////////////////

		/**
		 * @paragraph This method adds a route to the instance
		 * @brief HeimdallGI::Router::AddRoute()
		 * @param QString strPath
		 * @param QObject* objController
		 * @param QByteArray qbaMethod
		 * @return HeimdallGI::Router* HeimdallGI::Router::mInstance
		 */
		Router* AddRoute(QString strPath, QObject* objController, QByteArray qbaMethod);

		/**
		 * @paragraph This method executes a route
		 * @brief HeimdallGI::Router::Execute()
		 * @param HeimdallGI::CGI* objRequest
		 * @param QString strPath [NULL]
		 * @return HeimdallGI::View*
		 */
		View* Execute(CGI* objRequest, QString strPath = NULL);

		///////////////////////////////////////////////////////////////////////
		/// Setters //////////////////////////////////////////////////////////
		/////////////////////////////////////////////////////////////////////

		/**
		 * @paragraph This method sets the request object into the instance
		 * @brief HeimdallGI::Router::SetRequest()
		 * @param HeimdallGI::CGI* objRequest
		 * @return HeimdallGI::Router* HeimdallGI::Router::mInstance
		 */
		Router* SetRequest(CGI* objRequest);


	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// End Class Definition /////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// End Namespace ////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// End Header ///////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#endif // HEIMDALLGI_ROUTER_H
