///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Definitions //////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef HEIMDALLGI_SINGLETON_H
#define HEIMDALLGI_SINGLETON_H

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Headers //////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "QMutex"
#include "QObject"

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Namespace ////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace HeimdallGI {

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Templates ////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/**
	 * @paragraph This template defines a dynamic template class so that a singleton may be provided to any object
	 */
	template <class T>

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// HeimdallGI::Singleton Class Definition ///////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////

	class Singleton
	{

	///////////////////////////////////////////////////////////////////////
	/// Protected Methods & Properties ///////////////////////////////////
	/////////////////////////////////////////////////////////////////////

	protected:

		///////////////////////////////////////////////////////////////
		/// Properties ///////////////////////////////////////////////
		/////////////////////////////////////////////////////////////

		/**
		 * @paragraph This property contains the class mutex
		 * @brief HeimdallGI::Singleton::mMutex
		 * @var QMutex
		 */
		static QMutex mMutex;

	///////////////////////////////////////////////////////////////////////
	/// Private Methods & Properties /////////////////////////////////////
	/////////////////////////////////////////////////////////////////////

	private:

		///////////////////////////////////////////////////////////////
		/// Methods //////////////////////////////////////////////////
		/////////////////////////////////////////////////////////////

		/**
		 * @paragraph This is our constructor, but since this is a static class, we hide it
		 * @brief HeimdallGI::Singleton::Singleton()
		 * @return HeimdallGI::Singleton*
		 */
		Singleton();

		/**
		 * @paragraph This is our destructor, but since this is a static class, we hide it
		 * @brief HeimdallGI::Singleton::~Singleton()
		 */
		~Singleton();

		/**
		 * @paragraph This is our copy constructor, but we hide it because of what this class does
		 * @brief HeimdallGI::Singleton::Singleton()
		 * @param const HeimdallGI::Singleton &
		 * @return HeimdallGI::Singleton*
		 */
		Singleton(const Singleton &);

	///////////////////////////////////////////////////////////////////////
	/// Public Methods & Properties //////////////////////////////////////
	/////////////////////////////////////////////////////////////////////

	public:

		/**
		 * @paragraph This method maintains the singleton access for class T
		 * @brief HeimdallGI::Singleton::Instance()
		 * @return T* HeimdallGI::Singleton::mInstance
		 */
		static T& Instance() {
			// Define the instance
			static T hgiInstance;
			// Return the instance
			return hgiInstance;
		}

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// End HeimdallGI::Singleton Class Definition ///////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////

	};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// End Namespace ////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// End Definitions //////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#endif
